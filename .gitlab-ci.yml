stages:
  - test
  - deploy
  - release

Styling Check:
  stage: test
  image: php:8-alpine
  before_script:
    - apk update
    - apk add zip unzip
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    - php composer-setup.php --install-dir=/usr/local/bin --filename=composer
    - php -r "unlink('composer-setup.php');"
  script:
    - composer install --prefer-dist --no-ansi --no-interaction --no-progress
    - composer run style

Unit Test:
  image: php:${PHP_VER}
  stage: test
  needs:
    - "Styling Check"
  variables:
    db: "sqllike"
    db_dsn: "sqlite:./db.sqlite"
    db_username: ""
    db_password: ""
  before_script:
    - apk update
    - apk add zip unzip
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    - php composer-setup.php --install-dir=/usr/local/bin --filename=composer
    - php -r "unlink('composer-setup.php');"
  script:
    - composer install --prefer-dist --no-ansi --no-interaction --no-progress
    - composer run test -- --log-junit report.xml
  parallel:
    matrix:
      - PHP_VER: [7.4-alpine, 8.0-alpine, 8.1-alpine, 7-alpine, 8-alpine]
  artifacts:
    when: always
    reports:
      junit: report.xml

MySQL Integration Test:
  image: php:8-alpine
  stage: test
  needs:
    - "Unit Test"
  services:
    - mysql:latest
  variables:
    MYSQL_ROOT_PASSWORD: "baccano"
    MYSQL_DATABASE: "f3ilgar"
    db: "sqllike"
    db_dsn: "mysql:host=mysql;port=3306;dbname=f3ilgar"
    db_username: "root"
    db_password: "baccano"
  before_script:
    - apk update
    - apk add zip unzip
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    - php composer-setup.php --install-dir=/usr/local/bin --filename=composer
    - php -r "unlink('composer-setup.php');"
    - docker-php-ext-install pdo pdo_mysql
  script:
    - composer install --prefer-dist --no-ansi --no-interaction --no-progress
    - composer run test -- --log-junit report.xml
  artifacts:
    when: always
    reports:
      junit: report.xml

Postgre Integration Test:
  image: php:8-alpine
  stage: test
  needs:
    - "Unit Test"
  services:
    - postgres:latest
  variables:
    POSTGRES_PASSWORD: "baccano"
    POSTGRES_DB: "f3ilgar"
    db: "sqllike"
    db_dsn: "pgsql:host=postgres;port=5432;dbname=f3ilgar"
    db_username: "postgres"
    db_password: "baccano"
  before_script:
    - apk update
    - apk add zip unzip
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    - php composer-setup.php --install-dir=/usr/local/bin --filename=composer
    - php -r "unlink('composer-setup.php');"
    - apk update && apk add libpq-dev && docker-php-ext-install pdo pdo_pgsql
  script:
    - composer install --prefer-dist --no-ansi --no-interaction --no-progress
    - composer run test -- --log-junit report.xml
  artifacts:
    when: always
    reports:
      junit: report.xml

Mongo Integration Test:
  image: php:8-alpine
  stage: test
  needs:
    - "Unit Test"
  services:
    - mongo:latest
  variables:
    MONGO_INITDB_ROOT_USERNAME: "root"
    MONGO_INITDB_ROOT_PASSWORD: "baccano"
    MONGO_INITDB_DATABASE: "f3ilgar"
    db: "mongo"
    db_dsn: "mongodb://root:baccano@mongo:27017"
    db_table: "f3ilgar"
  before_script:
    - apk update
    - apk add zip unzip
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    - php composer-setup.php --install-dir=/usr/local/bin --filename=composer
    - php -r "unlink('composer-setup.php');"
    - apk add --no-cache --update --virtual buildDeps autoconf gcc make g++ zlib-dev libressl-dev curl-dev openssl-dev
    - pecl install mongodb
    - cp /usr/local/etc/php/php.ini-development /usr/local/etc/php/php.ini
    - echo "extension=mongodb.so" >> `php --ini | grep "Loaded Configuration" | sed -e "s|.*:\s*||"`
  script:
    - composer install --prefer-dist --no-ansi --no-interaction --no-progress
    - composer require mongodb/mongodb --no-ansi --no-interaction --no-progress
    - composer run test -- --log-junit report.xml
  artifacts:
    when: always
    reports:
      junit: report.xml

Publisher (Tag):
  stage: deploy
  image: registry.gitlab.com/chez14/publisher:v1.0.2
  ## run only when this is not a tagged commit.
  rules:
    - if: '$CI_COMMIT_TAG == null && $CI_COMMIT_REF_PROTECTED == "true"'
  needs:
    - "Unit Test"
    - "MySQL Integration Test"
    - "Postgre Integration Test"
    - "Mongo Integration Test"
  script:
    - setup-ssh.sh
    - setup-git.sh
    - gitlab-unshallow.sh
    - autotag
    - git push --tags

GitLab Release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - "Unit Test"
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "Running the release job."
  release:
    name: "Release $CI_COMMIT_TAG"
    description: "Release created using the release-cli."
    tag_name: $CI_COMMIT_TAG
    ref: $CI_COMMIT_TAG

Documentation:
  image: docker:latest
  stage: deploy
  needs:
    - "Unit Test"
  variables:
    PUBLIC_URL: "/-/$CI_PROJECT_NAME/-/jobs/$CI_JOB_ID/artifacts/public"
  services:
    - docker:dind
  script:
    - docker pull phpdoc/phpdoc
    - docker run --rm -v $(pwd):/data phpdoc/phpdoc run
    - echo "Documentation published on https://${CI_PROJECT_NAMESPACE}.gitlab.io/-/${CI_PROJECT_NAME}/-/jobs/${CI_JOB_ID}/artifacts/public/index.html"
  environment:
    name: Docs
    url: "https://$CI_PROJECT_NAMESPACE.gitlab.io/-/$CI_PROJECT_NAME/-/jobs/$CI_JOB_ID/artifacts/public/index.html"
  artifacts:
    paths:
      - public
